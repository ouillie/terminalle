import{_ as a,r as o,o as l,c as d,a as t,b as s,F as r,d as e,e as i}from"./app.b1bd2922.js";const c={},m=t("p",null,"Note: This currently only works with Wayland-based desktop environments.",-1),u=e('A modern, minimalist, semi-transparent fullscreen "drop-down" terminal emulateur for '),p={href:"https://freedesktop.org",target:"_blank",rel:"noopener noreferrer"},g=e("freedesktop.org"),h=e("-compatible desktops (e.g. GNOME, KDE)."),b=e("It omits many features common in other terminal emulators, such as tabs, because it's meant to be used in conjunction with a terminal multiplexer such as "),v={href:"https://tmux.github.io",target:"_blank",rel:"noopener noreferrer"},y=e("tmux"),f=e(", which has a solid, mature UI. See also "),k=t("a",{href:"#tmux-mode"},"tmux mode",-1),x=e(" for enhanced tmux features."),w=e("Based on "),_={href:"https://wiki.gnome.org/Apps/Terminal/VTE",target:"_blank",rel:"noopener noreferrer"},C=e("VTE"),q=e("."),T=t("h2",{id:"usage",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#usage","aria-hidden":"true"},"#"),e(" Usage")],-1),P=e("Whichever process runs "),I=t("code",null,"terminalle",-1),S=e(' is the "server". Use '),M={href:"https://www.freedesktop.org/wiki/Software/dbus",target:"_blank",rel:"noopener noreferrer"},D=e("D-Bus"),N=e(" to control it."),E=i(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># See usage info.</span>
terminalle --help

<span class="token comment"># Start the server (in this case, as a background job).</span>
<span class="token comment"># The window is initially hidden by default.</span>
<span class="token comment"># This is unnecessary if you&#39;ve enabled auto-start with \`terminalle auto\`.</span>
terminalle <span class="token operator">&amp;</span>

<span class="token comment"># Toggle window visibility.</span>
dbus-send --session --type<span class="token operator">=</span>method_call --dest<span class="token operator">=</span>party.will.Terminalle <span class="token punctuation">\\</span>
    /party/will/Terminalle party.will.Terminalle.Toggle

<span class="token comment"># Close the window and kill the server.</span>
dbus-send --session --type<span class="token operator">=</span>method_call --dest<span class="token operator">=</span>party.will.Terminalle <span class="token punctuation">\\</span>
    /party/will/Terminalle party.will.Terminalle.Quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to <code>Toggle</code> and <code>Quit</code>, there are four methods to move the terminal window between monitors: <code>MoveRight</code>, <code>MoveLeft</code>, <code>MoveDown</code>, and <code>MoveUp</code>, each of which moves the window to the next adjacent monitor in a particular direction. This only works while the window is open. See <a href="#shortcuts">shortcuts</a> for info on mapping keybindings to these D-Bus methods.</p><p>Use <code>Ctrl+Shift+C</code> and <code>Ctrl+Shift+V</code> to access the clipboard.</p><h2 id="install" tabindex="-1"><a class="header-anchor" href="#install" aria-hidden="true">#</a> Install</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> terminalle

<span class="token comment"># Optional: Enable auto-start.</span>
<span class="token comment">#           Starts the server automatically (window hidden) on login</span>
<span class="token comment">#           and restarts automatically on toggle if closed.</span>
terminalle auto

<span class="token comment"># Optional: Disable auto-start.</span>
<span class="token comment">#           If enabled, it should be disabled prior to uninstalling.</span>
terminalle no-auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shortcuts" tabindex="-1"><a class="header-anchor" href="#shortcuts" aria-hidden="true">#</a> Shortcuts</h3><p>You almost certainly want to hook up the toggle method to a keybinding for easy access. In GNOME, you can either do that in the GNOME Control Center (a.k.a &quot;Settings&quot;), or with <code>gsettings</code>:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># WARNING: Running this verbatim will disable any existing custom keybindings.</span>
<span class="token comment">#          It&#39;s an example.</span>
gsettings <span class="token builtin class-name">set</span> org.gnome.settings-daemon.plugins.media-keys custom-keybindings <span class="token string">&quot;[&#39;/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/&#39;]&quot;</span>

<span class="token comment"># WARNING: This will overwrite any existing custom keybinding called &#39;custom0&#39;.</span>
gsettings <span class="token builtin class-name">set</span> org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name <span class="token string">&quot;Toggle Terminalle&quot;</span>
gsettings <span class="token builtin class-name">set</span> org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ <span class="token builtin class-name">command</span> <span class="token string">&quot;dbus-send --session --type=method_call --dest=party.will.Terminalle /party/will/Terminalle party.will.Terminalle.Toggle&quot;</span>
gsettings <span class="token builtin class-name">set</span> org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding <span class="token string">&quot;&lt;Super&gt;Return&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you use multiple monitors, consider hooking up shortcuts for the aforementioned movement methods as well.</p>`,9),U={href:"https://docs.kde.org/trunk5/en/khotkeys/kcontrol/khotkeys/khotkeys.pdf",target:"_blank",rel:"noopener noreferrer"},z=e("KDE can"),G=e(" configure shortcuts to call D-Bus methods directly."),R=i(`<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>See an <a href="terminalle.yaml">example configuration</a>. See the defaults in <a href="terminalle/settings.py"><code>settings.py</code></a>. Defaults can be selectively overridden in <code>\${XDG_CONFIG_HOME:-\${HOME}/.config}/terminalle.yaml</code>.</p><h2 id="tmux-mode" tabindex="-1"><a class="header-anchor" href="#tmux-mode" aria-hidden="true">#</a> TMUX MODE</h2><p>This is the recommended way to use Terminalle. It enables some alternative tmux keyboard shortcuts, which would normally be impossible to configure in <code>.tmux.conf</code> since terminal emulators typically cannot handle these key combinations. Generally replacing the tmux prefix with a simple <code>Ctrl</code> modifier, it cuts the number of keystrokes in half without requiring you to memorize new shortcuts. If you&#39;re a tmux power-user, this will <em>change</em> things for you. Turn it on by setting <code>tmux: true</code> in <code>terminalle.yaml</code> (see <a href="#configuration">configuration</a>).</p><p>The following shortcuts are enabled in tmux mode:</p><table><thead><tr><th style="text-align:right;">tmux default</th><th style="text-align:right;">tmux mode</th><th style="text-align:left;">Command</th></tr></thead><tbody><tr><td style="text-align:right;"><code>&lt;Prefix&gt; !</code></td><td style="text-align:right;"><code>Ctrl+!</code></td><td style="text-align:left;"><code>break-pane</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; &quot;</code></td><td style="text-align:right;"><code>Ctrl+&quot;</code></td><td style="text-align:left;"><code>split-window</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; #</code></td><td style="text-align:right;"><code>Ctrl+#</code></td><td style="text-align:left;"><code>list-buffers</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; $</code></td><td style="text-align:right;"><code>Ctrl+$</code></td><td style="text-align:left;"><code>command-prompt -I &quot;#S&quot; &quot;rename-session -- &#39;%%&#39;&quot;</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; %</code></td><td style="text-align:right;"><code>Ctrl+%</code></td><td style="text-align:left;"><code>split-window -h</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; &amp;</code></td><td style="text-align:right;"><code>Ctrl+&amp;</code></td><td style="text-align:left;"><code>confirm-before -p &quot;kill-window #W? (y/n)&quot; kill-window</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; &#39;</code></td><td style="text-align:right;"><code>Ctrl+&#39;</code></td><td style="text-align:left;"><code>command-prompt -T window-target -p &quot;index&quot; &quot;select-window -t &#39;:%%&#39;&quot;</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; (</code></td><td style="text-align:right;"><code>Ctrl+(</code></td><td style="text-align:left;"><code>switch-client -p</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; )</code></td><td style="text-align:right;"><code>Ctrl+)</code></td><td style="text-align:left;"><code>switch-client -n</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; ,</code></td><td style="text-align:right;"><code>Ctrl+,</code></td><td style="text-align:left;"><code>command-prompt -I &quot;#W&quot; &quot;rename-window -- &#39;%%&#39;&quot;</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; :</code></td><td style="text-align:right;"><code>Ctrl+:</code></td><td style="text-align:left;"><code>command-prompt</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; ;</code></td><td style="text-align:right;"><code>Ctrl+;</code></td><td style="text-align:left;"><code>last-pane</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; =</code></td><td style="text-align:right;"><code>Ctrl+=</code></td><td style="text-align:left;"><code>choose-buffer -Z</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; [</code></td><td style="text-align:right;"><code>Ctrl+[</code></td><td style="text-align:left;"><code>copy-mode</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; ]</code></td><td style="text-align:right;"><code>Ctrl+]</code></td><td style="text-align:left;"><code>paste-buffer</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; {</code></td><td style="text-align:right;"><code>Ctrl+{</code></td><td style="text-align:left;"><code>swap-pane -U</code></td></tr><tr><td style="text-align:right;"><code>&lt;Prefix&gt; }</code></td><td style="text-align:right;"><code>Ctrl+}</code></td><td style="text-align:left;"><code>swap-pane -D</code></td></tr></tbody></table><p>To reap maximum benefits, add the following to your <code>.tmux.conf</code>, taking care of other common tmux shortcuts that do not get mangled by typical terminal emulators:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Generally shorten \`&lt;Prefix&gt; &lt;X&gt;\` to \`Ctrl+&lt;X&gt;\` for various \`&lt;X&gt;\`.</span>
<span class="token comment"># Note that some commands (e.g. \`&lt;Prefix&gt; c\` for \`new-window\`) would conflict with</span>
<span class="token comment"># established control sequences (\`Ctrl+c\` should send \`SIGINT\`) if shortened.</span>
<span class="token builtin class-name">bind</span> -n C-f      command-prompt <span class="token string">&quot;find-window -Z -- &#39;%%&#39;&quot;</span>
<span class="token builtin class-name">bind</span> -n C-n      next-window
<span class="token builtin class-name">bind</span> -n C-o      select-pane -t <span class="token string">&quot;:.+&quot;</span>
<span class="token builtin class-name">bind</span> -n C-p      previous-window
<span class="token builtin class-name">bind</span> -n C-q      display-panes
<span class="token builtin class-name">bind</span> -n C-s      choose-tree -Zs
<span class="token builtin class-name">bind</span> -n C-t      clock-mode
<span class="token builtin class-name">bind</span> -n C-x      confirm-before -p <span class="token string">&quot;kill-pane #P? (y/n)&quot;</span> kill-pane
<span class="token builtin class-name">bind</span> -n C-Space  next-layout

<span class="token comment"># Resize panes using arrow keys and either \`Ctrl\` or \`Meta\`.</span>
<span class="token builtin class-name">bind</span> -n C-Up     resize-pane -U
<span class="token builtin class-name">bind</span> -n M-Up     resize-pane -U <span class="token number">5</span>
<span class="token builtin class-name">bind</span> -n C-Down   resize-pane -D
<span class="token builtin class-name">bind</span> -n M-Down   resize-pane -D <span class="token number">5</span>
<span class="token builtin class-name">bind</span> -n C-Left   resize-pane -L
<span class="token builtin class-name">bind</span> -n M-Left   resize-pane -L <span class="token number">5</span>
<span class="token builtin class-name">bind</span> -n C-Right  resize-pane -R
<span class="token builtin class-name">bind</span> -n M-Right  resize-pane -R <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),O=e("This all goes especially well with "),V={href:"https://github.com/christoomey/vim-tmux-navigator",target:"_blank",rel:"noopener noreferrer"},B=e("vim-tmux-navigator"),L=e(", which provides shortened bindings for switching seemlessly between tmux panes and Vim windows.");function W(X,A){const n=o("ExternalLinkIcon");return l(),d(r,null,[m,t("p",null,[u,t("a",p,[g,s(n)]),h]),t("p",null,[b,t("a",v,[y,s(n)]),f,k,x]),t("p",null,[w,t("a",_,[C,s(n)]),q]),T,t("p",null,[P,I,S,t("a",M,[D,s(n)]),N]),E,t("p",null,[t("a",U,[z,s(n)]),G]),R,t("p",null,[O,t("a",V,[B,s(n)]),L])],64)}var j=a(c,[["render",W],["__file","index.html.vue"]]);export{j as default};
